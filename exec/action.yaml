name: "execute with sver"
description: |
  Run the command only when there is no previous successful job for the same version.

inputs:
  phase:
    description: 'phase name'
    required: true
  command:
    description: 'execute command'
    required: true
  path:
    description: 'sver target path'
    required: false
    default: '.'

  github_token:
    description: 'github token for download artifact'
    required: true

  cache_save_enable:
    description: 'if true, save cache'
    type: boolean
    required: false
    default: true
  cache_key:
    description: 'cache key'
    required: false
    default: ''
  cache_restore-keys:
    description: 'cache restore keys'
    required: false
    default: ''
  cache_path:
    description: 'cache path'
    required: false
    default: ''

  artifact_name:
    description: 'artifact name'
    required: false
    default: ''
  artifact_path:
    description: 'artifact path'
    required: false
    default: ''

runs:
  using: "composite"
  steps:
    - name: Create ci-result dir
      shell: bash
      run: mkdir -p ci-result
    - id: calc_version
      name: calc current version
      shell: bash
      run: |
        version="$(sver calc ${{ inputs.path }})"
        echo "version=${version}" >> "$GITHUB_OUTPUT"

    - id: ci_result
      name: Download ci_result
      shell: bash
      run: |
        exit_code=0
        gh run download -n '${{ inputs.phase }}-${{ steps.calc_version.outputs.version }}.success' || exit_code=$?
        echo "exit_code=${exit_code}" >> "$GITHUB_OUTPUT"
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}

    - id: restore_cache
      name: restore cache
      if: ${{ steps.ci_result.outputs.exit_code != '0' && inputs.cache_key != '' && inputs.cache_path != '' }}
      uses: actions/cache/restore@v3
      with:
        key: "${{ inputs.cache_key }}"
        path: "${{ inputs.cache_path }}"
        restore-keys: "${{ inputs.cache_restore-keys }}"

    - name: execute
      if: ${{ steps.ci_result.outputs.exit_code != '0' }}
      shell: bash
      run: "${{ inputs.command }}"

    - name: save result
      if: ${{ steps.ci_result.outputs.exit_code != '0' }}
      shell: bash
      run: touch ci-result/${{ inputs.phase }}-${{ steps.calc_version.outputs.version }}.success

    - uses: actions/upload-artifact@v3
      if: ${{ steps.ci_result.outputs.exit_code != '0' }}
      with:
        name: ${{ inputs.phase }}-${{ steps.calc_version.outputs.version }}.success
        path: ci-result/${{ inputs.phase }}-${{ steps.calc_version.outputs.version }}.success

    - uses: actions/upload-artifact@v3
      if: ${{ steps.ci_result.outputs.exit_code != '0' && inputs.artifact_name != '' && inputs.artifact_path != ''  }}
      with:
        name: ${{ inputs.artifact_name }}-${{ steps.calc_version.outputs.version }}
        path: ${{ inputs.artifact_path }}

    - name: save cache
      if: ${{ steps.ci_result.outputs.exit_code != '0' && steps.restore_cache.outputs.cache-hit != 'true' && inputs.cache_save_enable == 'true' &&  && inputs.cache_key != '' && inputs.cache_path != '' }}
      uses: actions/cache/save@v3
      with:
        key: "${{ inputs.cache_key }}"
        path: "${{ inputs.cache_path }}"

    - name: echo skip log
      if: ${{ steps.ci_result.outputs.exit_code == '0' }}
      shell: bash
      run: echo "job is already succeeded. skip this job."
